#+TITLE:  HS school
#+AUTHOR: M. Surmashev
#+DATE:   2021-02-01
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+FILETAGS: school

* Health Samurai FullStack developer courses
  Цикл курсов от [[https://www.health-samurai.io][HealthSamurai]] направленных на подготовку ~FullStack~ инженеоров.
  Темы курсов:
  - *Dev environment*
  - *Frontend/Backend Clj/Cljs development*
  - *PostgreSQL Database administration*
  - *DevOps*
** TODO добавить болеее подробное описание курсов

* Dev environment
  Цель курса - познакомить обучающихся с эффективными практиками разработки.
  По завершению курса:
    - Пользоваться ~bash~
    - Скриптовать локально/удаленно
    - Расширять свой редактор (~emacs~)
  *Продолжительность:* ~2недели~
  *Количество онлайн занятий:* ~2~
  *Темы курса:*
    - Bash/Tmux
    - Git
    - Emacs/Vim
    - SSH
    - Docker
    - Touch typin
  *Курсовая работа:*
    ~WIP:~ Поднять в ~DockerCompose~ контейнер с ~Ubuntu~. Написать скрипт который
установит в данный контейнер, на пример, ~PostgreSQL~, либо на выбор ~mongo~, ~mysql~.
Написать плагин для ~Emacs~ с помощью которого можно выполнять ~sql~ зыпросы в запущенной базе.
Сдать работу в виде ссылки на ~GitHub~ репозиторий.

** TODO Добавить ссылки для подготоки на соответствующие материалы

* Frontend & Backend Clojure development
*** UI
   - Re-frame reagent garden
*** Back
   - ring middleware jdbc honey
*** Tests
   - TDD basics
   - Multiple environments

** *Курсовая работа:*
  Реализовать ~CRUD~ пациентов с возможностью загрузки файлов и сохранением их на
  S3 подобном хранилище. Сделать авторизацию.
* DevOps
  Курс включает в себя работу как с голым железом, так и работу с k8s кластером.
Работа с железом позволит более четко и полно понять основные задачи которые
решают DevOps инженры (да и в целом полезен данный опыт). Работа в кластере
покажет современные способы решения данных проблем.
** План курса
*** DevOps Culture
   Short intro in to DevOps culture
*** Infrastructure
   - Docker
   - Docker compose
   - Ansible
   - Kubernetes
   - CI/CD
     - Preinstall
     - Secrets
     - Test & Build
     - Delivery
*** Networking (WEB specific)
   - REST
   - HTTP
   - DNS
   - Load balancing
   - Nginx/Proxy
*** Monitoring & Audit
   - Basic monitoring Prometheus
   - Audit ES + Kibana
   - Performance testing ?



** Курсовая работа
   Поднять в docker-compose 2 виртуальных машины. При помощи Ansible развернуть на них k8s.
Развернуть в кластере CI/CD какого-нибудь тестового приложения. Сделать поверх него мониторинг.

* Database
  Курс разбит на два этапа. Первый ориентирован на разработчиков,
включающий в себя основые аспекты работы и внутреннего устройства
PostgreSQL. Вторая часть курса сконцентрирована сугубо на администриовании
базы банных бекапировании, реплицировании и тд
  Есть хороший референс - курсы от [[https://postgrespro.ru/education/courses][PostgresPro]] они слишком обширны и фундаментальны
но думаю что их можно подсократить и адаптировать под наши нужды.
** Примерный план
*** DB for developers
   - PG basics
     - CRUD
     - Aggregations
     - Joins
   - PG core
     - MVCC
     - Vacuum
   - Transaction Isolation
     - Read commited
     - Read uncommited
     - Repeatable read
     - Serializable
   - Indexes
     - Btree
     - GIN
     - GIST
   - Explain
*** DB for administrators
   - Basic administration
     - Postgresql config
     - Extensions
   - Replication
     - Sync/async
   - Backups
     - Concepts
     - CheckPoint
     - pg_basebackup
     - wal-e/wal-g
   - Monitoring
     - raw baremetal metrics
     - transactions
     - tables
     - replicas
