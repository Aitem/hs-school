#+TITLE: QOPT
#+AUTHOR: M. Surmashev @muradbei
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+PROPERTY: header-args:sql :engine postgresql :dbport 5400 :dbhost localhost :dbuser postgres :dbpassword postgres :database postgres

* Intro                                                            :noexport:

  [[./qopt.jpg]]

* Table of Contents                                                   :TOC_3:
- [[#install][Install]]
  - [[#run-database][Run database]]
  - [[#fill-data][Fill data]]
- [[#optimization][Optimization]]
- [[#query][Query]]
  - [[#standart-simple-protocol][Standart (simple) protocol]]
    - [[#extrra][Extrra]]
  - [[#extended-protocol][Extended protocol]]
  - [[#query-planning][Query planning]]
- [[#seq-scan][SEQ scan]]
- [[#index-scan][Index scan]]
  - [[#what-about-jsonb][What about JSONB?]]
    - [[#extra][Extra]]
- [[#bitmap-index-scan][Bitmap Index scan]]
- [[#gin-index][GIN index]]
- [[#join][JOIN]]
  - [[#nested-loop][Nested loop]]
  - [[#hash-join][Hash join]]
  - [[#merge-join][Merge join]]
- [[#hw][HW]]

* Install

** Run database

  Run docker container vith PostgreSQL 12:
  #+name: Run db
  #+BEGIN_SRC bash
    docker-compose up -d
  #+END_SRC

  Check connection:
  #+name: Check connection
  #+BEGIN_SRC bash :results value drawer
    psql -h localhost -p 5400 -U postgres -c 'select 1';
  #+END_SRC

  Ensure connection via psql:
  #+name: Check connection and list databases
  #+BEGIN_SRC sql
    \l
  #+END_SRC


** Fill data

   Download [[https://storage.googleapis.com/aidbox-public/school/fhir_data_sample.dump][fhir_data_sample.dump]] file with ~Patient~, ~Observation~, ~Condition~, ~Encounter~, ~DocumentReference~ tables.

   #+BEGIN_SRC bash
      pg_restore -p 5400 -h localhost -U postgres -d postgres fhir_data_sample.dump
   #+END_SRC

   #+BEGIN_SRC sql :results value drawer
     select count(*) patient     from patient;
     select count(*) observation from observation;
     select count(*) condition   from condition;
     select count(*) encounter   from encounter;
     select count(*) docreffs    from documentreference;
   #+END_SRC

* Optimization

 - =Optimize database instance=
   Table space, ~work_mem~, ~shared_buffers~, ~partitioning~, ~vacuum~ ...

 - =Optimize query=
   Query plann optimization

* Query

 =Simple= and =Extended= Query [[https://www.postgresql.org/docs/12/protocol-flow.html][Message Flow]]

** Standart (simple) protocol

   Query execution states:

   - ~Parse~ sql string into AST
   - ~Rewrite~ transform query
   - ~Planning~ create exution plan
   - ~Execute~ execute query

*** Extrra

    #+BEGIN_SRC sql
      alter system set log_parser_stats = on;
    #+END_SRC

    #+BEGIN_SRC sql
	    alter
      system set log_planner_stats = on;
    #+END_SRC

    #+BEGIN_SRC sql
      alter system set log_executor_stats = on;
    #+END_SRC

    #+BEGIN_SRC sql
      select pg_reload_conf();
    #+END_SRC

    #+BEGIN_SRC sql
      explain (analyze)
      select id from patient limit 1;
    #+END_SRC

    #+BEGIN_SRC bash :results value pp
      docker logs -n 60 hs-db 2>&1 | egrep 'LOG|elapsed'
    #+END_SRC

** Extened protocol
   The results of preparatory steps can be re-used multiple times for improved efficiency.

   =Prepare statements= - save ast after revrite
     - ~PREPARE~
     - ~pg_prepared_statements~ view

   =Cursor= - fetch batched data
     - ~DECLARE CURSOR~
     - ~FETCH~

** Query planning

   - Brute force all possible plans (if possible)
     - [[https://postgrespro.ru/docs/postgrespro/12/geqo-pg-intro?lang=en][GEQO]]
   - Plan Estimate
     - Selectivity (statistics)

   #+BEGIN_SRC sql
     select * from pg_stats
     where tablename = 'patient'
     limit 10
   #+END_SRC

* Query Optimization

  Optimization query execution plan

  - =EXPLAIN= - read query execution plan
  - =DATA ACCESS= adn =DATA JOIN= - seq/index scan, merge/hash join, nested loops ...
  - =INDEXES= - btree, gin, gist, rum, multicolumn, partial, functional ...

* Explain

   [[https://postgrespro.ru/docs/postgrespro/12/using-explain?lang=en][Using explain]] documentation

   #+BEGIN_SRC sql :results value drawer
     explain (analyze)
     select count(id)
       from patient
      where resource->>'birthDate' > '2000-01-01'
   #+END_SRC

   #+BEGIN_SRC sql :results value drawer
     explain analyze
     select count(e.id)
       from patient p
       join encounter e
         on e.resource#>>'{subject,id}' = p.id
      where p.resource->>'birthDate' > '2000-01-01'
   #+END_SRC

* SEQ scan

  =Sequential scan=

  #+BEGIN_SRC sql :results value drawer
    explain (analyze, buffers, costs off)
     select id
       from patient
      --where resource->>'birthDate' > '2000-01-01'
  #+END_SRC

  =Parallel seq scan=

  Just select very heavy for parallel

  #+BEGIN_SRC sql :results value drawer
    explain analyze
    select ts
      from observation
  #+END_SRC

  Aggregates good for parallel

  #+BEGIN_SRC sql :results value drawer
    explain analyze
     select count(*)
       from observation
  #+END_SRC

  #+BEGIN_SRC sql
    show  max_parallel_workers_per_gather
  #+END_SRC


  #+BEGIN_SRC sql
    show  max_parallel_workers_per_gather;
    alter system set  max_parallel_workers_per_gather = DEFAULT;
    select pg_reload_conf();
    show  max_parallel_workers_per_gather;

  #+END_SRC

  *Default:*

  #+BEGIN_SRC
    max_parallel_workers_per_gather = 2
    max_parallel_workers = 8
    max_worker_processes = 8
  #+END_SRC

* Index scan

  [[https://habr.com/ru/company/postgrespro/blog/330544/][Btree Index]]

  [[./btree.png]]


  =Index scan= / =Index only scan=

  #+BEGIN_SRC sql :results value drawer
    \d+ patient
  #+END_SRC


  #+BEGIN_SRC sql :results value drawer
    explain (analyze, buffers)
     select resource
       from observation
      where id = 'bc666ab5-b43d-63a0-2f5a-3ce4b57b6fc1'
  #+END_SRC

  #+BEGIN_SRC sql :results value drawer
    explain (analyze, buffers)
     select id
       from observation
      where id = 'bc666ab5-b43d-63a0-2f5a-3ce4b57b6fc1'
  #+END_SRC


** =Task 1= - find Patient with phohe ~555-712-8424~

  What about JSONB?

   #+BEGIN_SRC sql :results value drawer
    explain analyze
     select id, resource->'telecom'
       from patient
      where resource#>>'{telecom,0,value}' = '555-712-8424';
   #+END_SRC

*** Answer

    #+BEGIN_SRC sql
      create index patien_phone on patient ((resource#>>'{telecom,0,value}'));
    #+END_SRC

    #+BEGIN_SRC sql
      vacuum analyze patient;
    #+END_SRC

    #+BEGIN_SRC sql
      drop index patien_phone;
    #+END_SRC

*** Extra

  - parallel index scan
  - parallel_workers (for table)

* Bitmap Index scan

  Bitmap index scan
   where select from index return too many rows
   and data randomly ordered

** =Task 2= - find patients with birthDate gt 2020-01-01

   #+BEGIN_SRC sql
     create index patient_resource_birthdate
         on patient ((resource#>>'{birthDate}'));
   #+END_SRC

   #+BEGIN_SRC sql
     vacuum analyze patient
   #+END_SRC


   #+BEGIN_SRC sql :results value drawer
     explain analyze
      select id, resource#>>'{birthDate}'
	from patient
       where resource#>>'{birthDate}' > '2020-01-01'
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   QUERY PLAN
   Bitmap Heap Scan on patient  (cost=4.35..31.33 rows=9 width=69) (actual time=0.068..0.296 rows=12 loops=1)
     Recheck Cond: ((resource #>> '{birthDate}'::text[]) > '2020-01-01'::text)
     Heap Blocks: exact=12
     ->  Bitmap Index Scan on patient_resource_birthdate  (cost=0.00..4.34 rows=9 width=0) (actual time=0.025..0.032 rows=12 loops=1)
	   Index Cond: ((resource #>> '{birthDate}'::text[]) > '2020-01-01'::text)
   Planning Time: 4.248 ms
   Execution Time: 0.552 ms
   :END:

* GIN index

**  =Task 3= - Find Blood Pressure observations

  #+BEGIN_SRC json
    {
	"code": "85354-9",
	"system": "http://loinc.org",
	"display": "Blood Pressure"
    }
  #+END_SRC

  #+BEGIN_SRC sql :results value drawer
    explain (analyze, buffers)
     select count(id)
       from observation
      where resource @> '{"code": {"coding": [{"code": "85354-9", "system": "http://loinc.org"}]}}'
  #+END_SRC

  #+BEGIN_SRC sql
    create index observation_resource__gin_jsquery
        on observation
     using gin (resource jsonb_path_value_ops)
  #+END_SRC

  #+BEGIN_SRC sql
    vacuum analyze observation
  #+END_SRC


  #+BEGIN_SRC sql
    drop index observation_resource__gin_jsquery;
  #+END_SRC


** =Task 4= - Find Observations for patient

   GIN vs Btree

   #+BEGIN_SRC sql
     drop index observation_resource__subject_id
   #+END_SRC

   #+BEGIN_SRC sql
     create index  observation_resource__subject_id
         on observation ((resource#>>'{subject, id}'))
   #+END_SRC

   #+BEGIN_SRC sql :results value drawer
     explain analyze
     select id
       from observation
      where resource#>>'{subject,id}' = '6bfd6661-dbb4-4fd6-3536-c39161f57a5c'
   #+END_SRC

   #+BEGIN_SRC sql :results value drawer
     explain analyze
     select id
       from observation
      where resource @> '{"subject": {"id": "6bfd6661-dbb4-4fd6-3536-c39161f57a5c"}}'
   #+END_SRC

   #+BEGIN_SRC sql
     select pg_size_pretty(pg_relation_size('observation_resource__subject_id')) btree;
     select pg_size_pretty(pg_relation_size('observation_resource__gin_jsquery')) gin;
   #+END_SRC

* JOIN

  Not about left/right/inner BUT join methods

** Nested loop

   JOIN just nested loop -> cost N*M

*** =Task 5= - Find the oldest ~Patient~ with =Suspected COVID-19= ~Observation~

   ={code,coding,0}= = ={"code": "840544004", "display": "Suspected COVID-19"}=

   #+BEGIN_SRC sql :results value drawer
    explain (analyze, costs off, timing off)
     select c.id cid, p.id pid
       from condition c
       join patient p
         on p.id = c.resource#>>'{subject,id}'
      limit 100
   #+END_SRC

   *Another available plans:*
    - Nested loop
    - Nested loop Left/Right Join
    - Nested loop anti join : jeft join is null (not exists)
    - Nested loop semi join : (exists)

   *Advantages:*
    + No prepare actions
    + Good for less data
    + Ani condition (also <>)

** Hash join

   Hash table unioin -> N+M complexity

   #+BEGIN_SRC sql :results value drawer
      explain (analyze, costs off)
       select p.id pid, c.id
         from condition c
         join patient p
           on p.id = c.resource#>>'{subject,id}'
   #+END_SRC

** Merge join

   On sorting -> N+M or N*Log(N) + M*Log(M)

   #+BEGIN_SRC sql :results value drawer
     explain (analyze, costs off, timing off)
      select p.id pid, c.id cid
        from condition c
        join patient p
             on p.id = c.resource#>>'{subject,id}'
       where c.resource#>'{code,coding,0}' @> '{"code": "840544004", "display": "Suspected COVID-19"}'
       order by p.id
   #+END_SRC

   Table: a                Table: b

   | id | value |	  | id | value |
   |----+-------|	  |----+-------|
   |  1 | aaa   |	  |  1 | aaa   |
   |  2 | bbb   |	  |  2 | bbb   |
   |  3 | ccc   |	  |  3 | ccc   |
   |  4 | ccc   |
   |  5 | ddd   |


   #+BEGIN_SRC sql :results value drawer
     explain (analyze, costs off, timing off)
      select p.id pid, c.id cid
	from condition c
	join patient p
	     on p.id = c.resource#>>'{subject,id}'
       where c.resource#>'{code,coding,0}' @> '{"code": "840544004", "display": "Suspected COVID-19"}'
       order by p.resource#>>'{birthDate}'
       limit 1
   #+END_SRC











   #+BEGIN_SRC sql :results value drawer
     create index condition_resource_subject_1_covid
     on condition
     using gin ((resource->'subject'))
     where (resource @> '{"code": {"coding": [{"code": "840544004", "display": "Suspected COVID-19"}]}}')
   #+END_SRC


   #+BEGIN_SRC sql :results value drawer
     create index condition_resource_subject_3_covid
     on condition ((right(resource#>>'{subject,uri}', 36)))
     where (resource @> '{"code": {"coding": [{"code": "840544004", "display": "Suspected COVID-19"}]}}')
   #+END_SRC


   #+BEGIN_SRC sql :results value drawer
     explain analyze
     select id
     from condition
     where  resource->'subject' @> '{"uri": "urn:uuid:ef83a9f0-5d52-f0be-3997-90d9fb07905d"}'
     and (resource @> '{"code": {"coding": [{"code": "840544004", "display": "Suspected COVID-19"}]}}')
   #+END_SRC
