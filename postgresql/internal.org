#+TITLE: PG internal
#+AUTHOR: M. Surmashev @muradbei
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+PROPERTY: header-args:sql :engine postgresql :dbport 5400 :dbhost localhost :dbuser postgres :dbpassword postgres :database postgres

* Intro                                                            :noexport:

[[./internal.png]]

From Heroku

* Table of Contents                                                   :TOC_3:
- [[#install][Install]]
- [[#logical-and-physical-structure][Logical and physical structure]]
  - [[#logical][Logical]]
    - [[#create-database][Create database]]
    - [[#schema][Schema]]
  - [[#physical][Physical]]
    - [[#tablespace][TableSpace]]
    - [[#pages][Pages]]
- [[#base-concepts][Base concepts]]
  - [[#processes][Processes]]
  - [[#memory][Memory]]
- [[#acid][ACID]]
- [[#mvcc][MVCC]]
  - [[#mvcc-in-work][MVCC in work]]
  - [[#vacuum][Vacuum]]
  - [[#transaction-snapshot][Transaction Snapshot]]
  - [[#isolation-levels][Isolation levels]]
  - [[#summary][Summary]]
- [[#wal][WAL]]
- [[#checkpoint][Checkpoint]]

* Install

  Run docker container vith PostgreSQL 12:
  #+name: Run db
  #+BEGIN_SRC bash
    docker-compose up -d
  #+END_SRC

  Check connection:
  #+name: Check connection
  #+BEGIN_SRC bash :results value drawer
    psql -h localhost -p 5400 -U postgres -c 'select 1';
  #+END_SRC

  Ensure connection via psql:
  #+name: Check connection and list databases
  #+BEGIN_SRC sql
    \l
  #+END_SRC

* Logical and physical structure

** Logical

   =DBMS= -> =Database= -> =Schema= -> =Table/View/Index/etc=

   =DBMS= (Cluster) - ~my.super.instance~
    =Database= - ~project~
      =Schema= - ~public~
        =Table= - ~sample~
	=Index= - ~sample_id_pkey~

*** Create database

    By ~default~ - copy =template1=

    #+NAME: List databases
    #+BEGIN_SRC sql
      \l
    #+END_SRC

*** Schema

    #+NAME: List schemas
    #+BEGIN_SRC sql
      \dnS+
    #+END_SRC

    #+NAME: Show search path
    #+BEGIN_SRC sql
      show search_path;
    #+END_SRC

** Physical

   [[https://www.postgresql.org/docs/current/storage-file-layout.html][Database file layout]]

   #+NAME: PGDATA
   #+BEGIN_SRC bash :results value pp
     docker exec hs-db ls -lah /data
   #+END_SRC


   [[./pg_files.png]]


   #+NAME: PG base
   #+BEGIN_SRC bash :results value pp
     docker exec hs-db ls -lah /data/base
   #+END_SRC

   #+NAME: Create table for file test
   #+BEGIN_SRC sql
     create table if not exists file_test(id int);
   #+END_SRC

   #+NAME: Check database oid
   #+BEGIN_SRC sql
     select oid, datname
       from pg_database
      where datname = 'postgres';
   #+END_SRC

    #+NAME: Check table oid
    #+BEGIN_SRC sql
      SELECT relname, oid, relfilenode
        FROM pg_class
       WHERE relname = 'file_test';
    #+END_SRC

    #+NAME: Check table filepath
    #+BEGIN_SRC sql
      SELECT pg_relation_filepath('file_test');
    #+END_SRC

    #+NAME: PG view this file
    #+BEGIN_SRC bash :results value pp
      docker exec hs-db ls -lah /data/base/13400/147224
    #+END_SRC

*** TableSpace

    [[https://www.postgresql.org/docs/current/sql-createtablespace.html][CREATE TABLESPACE]]

    [[./pg_tablespace.png]]


    #+NAME: List tablespaces
    #+BEGIN_SRC sql
      \db+
    #+END_SRC

    =pg_global=  -> ~$PGDATA/global~
    =pg_default= -> ~$PGDATA/base~

    #+NAME: Create dir for new tblspc
    #+BEGIN_SRC bash
      docker exec hs-db mkdir /data/newtblspc
      docker exec hs-db chown postgres:postgres /data/newtblspc
    #+END_SRC

    #+NAME: Create  new tblspc
    #+BEGIN_SRC sql
      CREATE TABLESPACE newtblspc LOCATION '/data/newtblspc'
    #+END_SRC

    #+NAME: Check symlink
    #+BEGIN_SRC bash
      docker exec hs-db ls -lah /data/pg_tblspc
    #+END_SRC

    #+NAME: Create table in new tblspc
    #+BEGIN_SRC sql
      create table if not exists another_tbl (id int) tablespace newtblspc;
    #+END_SRC

    #+NAME: Check table filepath in new tblspc
    #+BEGIN_SRC sql
      SELECT pg_relation_filepath('another_tbl');
    #+END_SRC

*** Pages

    =Page structure=

    [[./pg_page.png]]


    [[https://postgrespro.ru/docs/postgrespro/12/pageinspect][PageInspect]] - module provides functions that allow you to inspect
                  the contents of database pages at a low level.

    #+NAME: Create extension pageinspect
    #+BEGIN_SRC sql
      create extension if not exists pageinspect;
    #+END_SRC

    #+NAME: Make some data
    #+BEGIN_SRC sql
      truncate another_tbl;
      insert into another_tbl (id)
      values (1), (2), (3);
    #+END_SRC


    [[https://postgrespro.ru/docs/postgrespro/13/storage-page-layout?lang=en][Page Header data]]

    #+NAME: Get page headers
    #+BEGIN_SRC sql
      SELECT * FROM page_header(get_raw_page('another_tbl', 0));
    #+END_SRC


    #+NAME: Get page items
    #+BEGIN_SRC sql
      SELECT * FROM heap_page_items(get_raw_page('another_tbl', 0));
    #+END_SRC


* Base concepts

** Processes

  [[./pg_concepts.png]]


  =Postmaster= - Main process
    - Create and manage all processes
    - Create connections/backends

    #+BEGIN_SRC bash :results value pp
      docker exec hs-db ps -aux
    #+END_SRC

** Memory

   [[./pg_mem.png]]


   =Shared memory= - pages with tables and indexes. Communication with disc via operating system + os cache
   =Local memory=  - Each backend process local memory area

* ACID

  =Atomicity=   - all or nothing
  =Consistency= - Consistency before and after
  =Isolation=   - MVCC
  =Durability=  - WAL

* MVCC

  =MVCC= - Multi-version Concurrency Control as solution for concurrency

  [[./txid.png]]

** MVCC in work

  #+BEGIN_SRC sql
    create table if not exists mvcc_test (id int);
    truncate mvcc_test;
  #+END_SRC

  #+BEGIN_SRC sql
    SELECT txid_current();
    insert into mvcc_test (id) values (1);
  #+END_SRC

  #+BEGIN_SRC sql
    SELECT lp, t_xmin, t_xmax, t_ctid, t_data
      FROM heap_page_items(get_raw_page('mvcc_test', 0));
  #+END_SRC

  #+NAME: Update
  #+BEGIN_SRC sql
    update mvcc_test set id = 2 where id = 1;
  #+END_SRC

  #+NAME: Check page again
  #+BEGIN_SRC sql
    SELECT lp, t_xmin, t_xmax, t_ctid, t_data
      FROM heap_page_items(get_raw_page('mvcc_test', 0));
  #+END_SRC

  #+NAME: Update again
  #+BEGIN_SRC sql
    update mvcc_test set id = 3 where id = 2;
  #+END_SRC

  #+NAME: Check page again and again
  #+BEGIN_SRC sql
    SELECT lp, t_xmin, t_xmax, t_ctid, t_data
      FROM heap_page_items(get_raw_page('mvcc_test', 0));
  #+END_SRC

** Vacuum

   #+NAME: Check page mvcc_test
   #+BEGIN_SRC sql
     SELECT lp, t_xmin, t_xmax, t_ctid, t_data
       FROM heap_page_items(get_raw_page('mvcc_test', 0));
   #+END_SRC

   #+RESULTS: Check page mvcc_test
   | lp | t_xmin | t_xmax | t_ctid | t_data     |
   |----+--------+--------+--------+------------|
   |  1 |   1057 |      0 | (0,1)  | \x04000000 |

   #+NAME: Vacuum table
   #+BEGIN_SRC sql
     vacuum mvcc_test;
   #+END_SRC

   #+NAME: Update after vacuum
   #+BEGIN_SRC sql
     update mvcc_test set id = 4 where id = 3;
   #+END_SRC

   #+NAME: Vacuum full
   #+BEGIN_SRC sql
     vacuum full mvcc_test;
   #+END_SRC

** Transaction Snapshot

   A ~Transaction Snapshot~ is a dataset that stored information about whether all
   transactions are active, at a certain point in time for an individual transaction.

   #+NAME: Current snapshot
   #+BEGIN_SRC sql
     SELECT txid_current_snapshot();
   #+END_SRC

** Isolation levels

  =Read uncommitted= - +not supporting+
    read not committed rows

  =Read committed= - ~default~
    data shaphot for each operator/command
    read only committed rows

    #+BEGIN_SRC sql
      BEGIN;
      -- Get data shanpshot
      SELECT count(*) from patient;
      -- Get data shanpshot               <-    inser into patient ; commit;
      SELECT count(*) from patient;
      -- Get data shanpshot
      SELECT count(*) from patient;
      END;
    #+END_SRC

  =Repeatable read=
    Data shaphot for first operator
    #+BEGIN_SRC sql
      BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
      -- Get data shanpshot
      SELECT count(*) from patient;
      -- <-    inser into patient ; commit;
      SELECT count(*) from patient;
      -- <-    inser into patient ; commit;
      SELECT count(*) from patient;

      END;
    #+END_SRC

  =Serializable=
    Full isolation (one each other)
    ~SERIALIZABLE~ is the default transaction isolation level in the ~standard~

  [[./txsnapshot.png]]

** Summary

   =On update= - create new record and delete previous  (with create ~xmin~ and close ~xmax~)
   =Data shanpshot= - all committed data before this transaction
                  - Current ~txid~ and all current working txid
   =Row locks= - read never lock
             - row write lock only for another write, read never lock
   =Bloat= table and index
   =Vacuum= / =Autovacuum=
   - Remove deleted rows
   - 2 process:
     - Autovacuum launcher
     - Autovacuum worker
   - Vacuum full
     - Lock table

* WAL

  =WAL= ~write-ahead log~ - journal, write first (fsync)
      not for temp and unlogged tables
  =Sync= / =Async= - fsync
  =Wal Levels=
   - Minimal
   - Replica
   - Logical

   #+BEGIN_SRC sql
     select pg_current_wal_lsn();
   #+END_SRC

   #+BEGIN_SRC sql
     SELECT pg_walfile_name(pg_current_wal_lsn());
   #+END_SRC

  #+BEGIN_SRC sql
    select * from pg_ls_waldir() limit 10;
  #+END_SRC

* Checkpoint

  =Checkpointer process= - dump all buffers to disc (fsync)

  #+BEGIN_SRC
         checkpoint                checkpoint         fail
  time .....|.........................|................X..............
  wal  +++++|+++++++++++++++++++++++++| == wal logs == |++++++++++++++
  #+END_SRC

  =On update=
    - write and fsync wal log
    - update on mem table page
  =On checkpoint=
    - dump buffers to disc
