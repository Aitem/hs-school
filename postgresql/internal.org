#+TITLE: PG internal
#+AUTHOR: M. Surmashev @muradbei
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+PROPERTY: header-args:sql :engine postgresql :dbport 5400 :dbhost localhost :dbuser postgres :dbpassword postgres :database postgres

* Intro                                                            :noexport:

[[./internal.png]]

From Heroku

* Table of Contents                                                   :TOC_3:
- [[#install][Install]]
- [[#logical-and-physical-structure][Logical and physical structure]]
  - [[#logical][Logical]]
    - [[#create-database][Create database]]
    - [[#schema][Schema]]
  - [[#physical][Physical]]
    - [[#tablespace][TableSpace]]
    - [[#pages][Pages]]
- [[#base-concepts][Base concepts]]
  - [[#processes][Processes]]
  - [[#memory][Memory]]
- [[#acid][ACID]]
- [[#mvcc][MVCC]]
- [[#isolation-levels][Isolation levels]]
- [[#cache-wal-checkpoint][Cache Wal CheckPoint]]
- [[#checkpoint][Checkpoint]]
- [[#create-database-1][Create database]]
  - [[#toast][Toast]]

* Install

  Run docker container vith PostgreSQL 12:
  #+name: Run db
  #+BEGIN_SRC bash
    docker-compose up -d
  #+END_SRC

  Check connection:
  #+name: Check connection
  #+BEGIN_SRC bash :results value drawer
    psql -h localhost -p 5400 -U postgres -c 'select 1';
  #+END_SRC

  Ensure connection via psql:
  #+name: Check connection and list databases
  #+BEGIN_SRC sql
    \l
  #+END_SRC

* Logical and physical structure

** Logical

   =DBMS= -> =Database= -> =Schema= -> =Table/View/Index/etc=

   =DBMS= (Cluster) - ~my.super.instance~
    =Database= - ~project~
      =Schema= - ~public~
        =Table= - ~sample~
	=Index= - ~sample_id_pkey~

*** Create database

    By ~default~ - copy =template1=

    #+NAME: List databases
    #+BEGIN_SRC sql
      \l
    #+END_SRC

*** Schema

    #+BEGIN_SRC sql
      \dnS+
    #+END_SRC


    #+BEGIN_SRC sql
      show search_path;
    #+END_SRC

** Physical

   [[https://www.postgresql.org/docs/current/storage-file-layout.html][Database file layout]]


   #+NAME: List tablespaces
   #+BEGIN_SRC sql
     \db+
   #+END_SRC

   #+RESULTS: List tablespaces
   | List of tablespaces |          |                 |                   |         |            |             |
   |---------------------+----------+-----------------+-------------------+---------+------------+-------------|
   | Name                | Owner    | Location        | Access privileges | Options | Size       | Description |
   | newtblspc           | postgres | /data/newtblspc |                   |         | 8288 bytes |             |
   | pg_default          | postgres |                 |                   |         | 849 MB     |             |
   | pg_global           | postgres |                 |                   |         | 623 kB     |             |

   =pg_global=  -> ~$PGDATA/global~
   =pg_default= -> ~$PGDATA/base~

   [[./pg_files.png]]


   #+NAME: PGDATA
   #+BEGIN_SRC bash :results value pp
     docker exec hs-db ls -lah /data
   #+END_SRC

   #+NAME: PG base
   #+BEGIN_SRC bash :results value pp
     docker exec hs-db ls -lah /data/base
   #+END_SRC

   #+NAME: Create table for file test
   #+BEGIN_SRC sql
     create table if not exists file_test(id int);
   #+END_SRC

   #+NAME: Check database oid
   #+BEGIN_SRC sql
     select oid, datname
     from pg_database
     where datname = 'postgres';
   #+END_SRC

    #+NAME: Check table oid
    #+BEGIN_SRC sql
      SELECT relname, oid, relfilenode
        FROM pg_class
       WHERE relname = 'file_test';
    #+END_SRC

    #+NAME: Check table filepath
    #+BEGIN_SRC sql
      SELECT pg_relation_filepath('file_test');
    #+END_SRC

    #+NAME: PG view this file
    #+BEGIN_SRC bash :results value pp
      docker exec hs-db ls -lah /data/base/13400/147224
    #+END_SRC

*** TableSpace

    [[https://www.postgresql.org/docs/current/sql-createtablespace.html][CREATE TABLESPACE]]

    [[./pg_tablespace.png]]

    #+NAME: Create dir for new tblspc
    #+BEGIN_SRC bash
      docker exec hs-db mkdir /data/newtblspc
      docker exec hs-db chown postgres:postgres /data/newtblspc
    #+END_SRC

    #+NAME: Create  new tblspc
    #+BEGIN_SRC sql
      CREATE TABLESPACE newtblspc LOCATION '/data/newtblspc'
    #+END_SRC

    #+NAME: Check symlink
    #+BEGIN_SRC bash
      docker exec hs-db ls -lah /data/pg_tblspc
    #+END_SRC

    #+NAME: Create table in new tblspc
    #+BEGIN_SRC sql
      create table if not exists another_tbl (id int) tablespace newtblspc;
    #+END_SRC

    #+NAME: Check table filepath in new tblspc
    #+BEGIN_SRC sql
      SELECT pg_relation_filepath('another_tbl');
    #+END_SRC

*** Pages

    =Page structure=

    [[./pg_page.png]]


    [[https://postgrespro.ru/docs/postgrespro/12/pageinspect][PageInspect]] - module provides functions that allow you to inspect
    the contents of database pages at a low level.

    #+NAME: Create extension pageinspect
    #+BEGIN_SRC sql
      create extension if not exists pageinspect;
    #+END_SRC

    #+NAME: Make some data
    #+BEGIN_SRC sql
      truncate another_tbl;
      insert into another_tbl (id)
      values (1), (2), (3);
    #+END_SRC


    [[https://postgrespro.ru/docs/postgrespro/13/storage-page-layout?lang=en][Page Header data]]

    #+NAME: Get page headers
    #+BEGIN_SRC sql
      SELECT * FROM page_header(get_raw_page('another_tbl', 0));
    #+END_SRC


    #+NAME: Get page items
    #+BEGIN_SRC sql
      SELECT * FROM heap_page_items(get_raw_page('another_tbl', 0));
    #+END_SRC


* Base concepts

** Processes

  [[./pg_concepts.png]]


  =Postmaster= - Main process
    - Create and manage all processes
    - Create connections/backends

    #+BEGIN_SRC bash :results value pp
      docker exec hs-db ps -aux
    #+END_SRC

** Memory

   [[./pg_mem.png]]


   =Shared memory= - pages with tables and indexes. Communication with disc via operating system + os cache
   =Local memory= - Each backend process local memory area



* ACID

  =Atomicity=   - all or nothing
  =Consistency= - Consistency before and after
  =Isolation=   - MVCC
  =Durability=  - WAL

* MVCC

  =MVCC= as solution for concurrency
    - 2 time marks: Create time (xmin) and delete time (xmax)

  #+BEGIN_SRC sql
    create table mvcc_test (id int);
  #+END_SRC

  #+BEGIN_SRC sql
    insert into mvcc_test (id) values (1);
  #+END_SRC

  #+BEGIN_SRC sql
    select id, xmin, xmax from mvcc_test;
  #+END_SRC

  #+BEGIN_SRC sql
    update mvcc_test set id = 3 where id = 2;
  #+END_SRC


  #+BEGIN_SRC sql
    select id, xmin, xmax from mvcc_test;
  #+END_SRC


  =On update= - delete previous and create new record (with create ~xmin~ and close ~xmax~)
  =Data shanpshot= - all committed data before this transaction
    - Current ~txid~ and all current working txid
  =Row locks=
    - read never lock
    - row write lock only for another write, read never lock
  =Bloat= table and index
  =Vacuum= / =Autovacuum=
  - Remove deleted rows
  - 2 process:
    - Autovacuum launcher
    - Autovacuum worker
  - Vacuum full
    - Lock table


* Isolation levels

  =Read uncommitted= - +not supporting+
    read not committed rows

  =Read committed= - ~default~
    data shaphot for each operator/command
    read only committed rows

    #+BEGIN_SRC sql
      BEGIN;
      -- Get data shanpshot
      SELECT count(*) from patient;
      -- Get data shanpshot               <-    inser into patient ; commit;
      SELECT count(*) from patient;
      -- Get data shanpshot
      SELECT count(*) from patient;
      END;
    #+END_SRC

  =Repeatable read=
    Data shaphot for first operator
    #+BEGIN_SRC sql
      BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
      -- Get data shanpshot
      SELECT count(*) from patient;
      -- <-    inser into patient ; commit;
      SELECT count(*) from patient;
      -- <-    inser into patient ; commit;
      SELECT count(*) from patient;

      END;
    #+END_SRC

  =Serializable=
    Full isolation (one each other)
    ~SERIALIZABLE~ is the default transaction isolation level in the ~standard~

* Cache Wal CheckPoint

  =WAL= ~write-ahead log~ - journal, write first (fsync)
      not for temp and unlogged tables
  =Sync= / =Async=
  =Wal Levels=
   - Minimal
   - Replica
   - Logical

  #+BEGIN_SRC sql
    select pg_current_wal_lsn();
  #+END_SRC

  #+RESULTS:
  | pg_current_wal_lsn |
  |--------------------|
  | 1/33D30EE0         |

  #+BEGIN_SRC sql
    select * from pg_ls_waldir() limit 10;
  #+END_SRC

  #+RESULTS:
  |                     name |     size | modification           |
  |--------------------------+----------+------------------------|
  | 000000010000000100000033 | 16777216 | 2021-04-30 17:30:23+00 |
  | 000000010000000100000034 | 16777216 | 2021-04-28 17:01:41+00 |
  | 000000010000000100000035 | 16777216 | 2021-04-28 17:01:44+00 |
  | 000000010000000100000036 | 16777216 | 2021-04-28 17:01:53+00 |
  | 000000010000000100000037 | 16777216 | 2021-04-28 17:01:56+00 |
  | 000000010000000100000038 | 16777216 | 2021-04-28 17:09:55+00 |
  | 000000010000000100000039 | 16777216 | 2021-04-28 17:10:11+00 |
  | 00000001000000010000003A | 16777216 | 2021-04-28 17:10:12+00 |
  | 00000001000000010000003B | 16777216 | 2021-04-28 17:10:12+00 |
  | 00000001000000010000003C | 16777216 | 2021-04-28 17:10:13+00 |

* Checkpoint

  =Checkpointer process=
  Restore all wals too expensive
  Make checkpoint and dump all buffers to disc

  #+BEGIN_SRC
   checkpoint                checkpoint         fail
  .....|.........................|................X.............+......
       |+++++++++++++++++++++++++| == wal logs == |++++++++++++++
  #+END_SRC


  On update

  - fsync wal log
  - update on mem table page 8k

  on checkpoint
  - dump mem to disc

* Create database




  #+BEGIN_SRC sql
    \l
  #+END_SRC

  #+RESULTS:
  | List of databases     |          |          |                 |             |                   |
  |-----------------------+----------+----------+-----------------+-------------+-------------------|
  | Name                  | Owner    | Encoding | Collate         | Ctype       | Access privileges |
  | postgres              | postgres | UTF8     | en_US.UTF-8@icu | en_US.UTF-8 |                   |
  | template0             | postgres | UTF8     | en_US.UTF-8@icu | en_US.UTF-8 | =c/postgres       |
  | postgres=CTc/postgres |          |          |                 |             |                   |
  | template1             | postgres | UTF8     | en_US.UTF-8@icu | en_US.UTF-8 | =c/postgres       |
  | postgres=CTc/postgres |          |          |                 |             |                   |

  #+BEGIN_SRC sql
    select * from public.user
  #+END_SRC

  #+RESULTS:
  | id    | txid | cts                           | ts                            | resource_type | status  | resource                                                                                                                |
  |-------+------+-------------------------------+-------------------------------+---------------+---------+-------------------------------------------------------------------------------------------------------------------------|
  | admin |    0 | 2021-03-29 08:23:59.389413+00 | 2021-03-29 08:23:59.389413+00 | User          | updated | {"password": "$s0$f0801$wQ8ZxzZycFnYhw4Q+ImR3g==$u3MeQsgFg3AlaEOidHz8e2Fw0UkyNH43NcB/FEgZWn0=", "resourceType": "User"} |

  #+BEGIN_SRC sql
    select * from user
  #+END_SRC

  #+RESULTS:
  | user     |
  |----------|
  | postgres |



  #+RESULTS:
  | search_path     |
  |-----------------|
  | "$user", public |

  #+BEGIN_SRC sql
    select * from pg_catalog.pg_database;
  #+END_SRC

  =pg_catalog= - implicit
  =pg_temp_N= - for temp and unlogged tables

  #+BEGIN_SRC sql
    select pg_size_pretty(pg_database_size('devbox'));
  #+END_SRC

  #+BEGIN_SRC sql
    insert into mvcc_test (id )
    select id from generate_series(4, 3000) id;
  #+END_SRC

  #+RESULTS:
  | INSERT 0 2997 |
  |---------------|


#+BEGIN_SRC sql
select count(*) from mvcc_test;
#+END_SRC

  #+RESULTS:
  | count |
  |-------|
  |     6 |

  #+BEGIN_SRC sql
    CHECKPOINT
  #+END_SRC

  #+RESULTS:
  | CHECKPOINT |
  |------------|

  #+BEGIN_SRC sql
    \d+ patient
  #+END_SRC


  #+BEGIN_SRC sql
    select pg_relation_filepath('patient_pkey');
  #+END_SRC

  #+RESULTS:
  | pg_relation_filepath |
  |----------------------|
  | base/16385/18026     |

** Toast

   ~Toast~ - The Oversized-Attribute Storage Technique

   Schema =pg_toast=

   1. Zip value untill 8 kb
   2. Move to another table, and slice
   3. Move to another table, and slice and zip

   No new version on row update
