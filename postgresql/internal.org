#+TITLE: PG internal
#+AUTHOR: M. Surmashev @muradbei
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+PROPERTY: header-args:sql :engine postgresql :dbport 5437 :dbhost localhost :dbuser postgres :dbpassword postgres :database devbox

* Intro                                                            :noexport:

[[./internal.png]]

* Table of Contents                                                   :TOC_3:
- [[#install][Install]]
- [[#pg-architecture][PG architecture]]
- [[#acid][ACID]]
- [[#base-concepts][Base concepts]]
- [[#mvcc][MVCC]]
- [[#isolation-levels][Isolation levels]]
- [[#cache-wal-checkpoint][Cache Wal CheckPoint]]
- [[#checkpoint][Checkpoint]]
- [[#create-database][Create database]]
  - [[#table-spaces][Table spaces]]
  - [[#toast][Toast]]

* Install

  Run docker container vith PostgreSQL 12:
  #+name: Run db
  #+BEGIN_SRC bash
    docker-compose up -d
  #+END_SRC

  Check connection:
  #+name: Check connection
  #+BEGIN_SRC bash :results value drawer
    psql -h localhost -p 5400 -U postgres -c 'select 1';
  #+END_SRC

  Ensure connection via psql:
  #+name: Check connection and list databases
  #+BEGIN_SRC sql
    \l
  #+END_SRC


* PG architecture

  ~<Client> =<-- protocol -->= ~<PG Server>~

  [[https://postgrespro.ru/docs/postgrespro/13/protocol?lang=en][Protocol]] - Postgres uses a message-based protocol for communication
             between frontends and backends (clients and servers).

  [[https://www.postgresql.org/docs/13/external-interfaces.html][Interfaces]] - language interfaces are external projects ([[https://www.postgresql.org/docs/13/libpq.html][libpq]] included)


* ACID

  =Atomicity=   - all or nothing
  =Consistency= - Consistency before and after
  =Isolation=   - MVCC
  =Durability=  - WAL


* Base concepts

  =postmaster= - Main process
    - Create and manage all processes
    - Create connections/backends
      - local buffer + work_mem (local process memory)

  =Shared memory=

  Parallel = locsk
  Too many connection bad
  Most useful - connection pool

  Communication with disc via operating system + os cache

 +------------+
 | Postmaster |------+
 +------------+      |
     |               |
 +------------+  +--------------------+
 | Backend    |	 | Background process |
 +------------+	 +--------------------+
     |               |
 +----------------------+
 |    Shared memory     |
 +----------------------+
       ||
+------+---------------------+
|      ||               OS   |
| +----------------------+   |
| |   OS cashe           |   |
| +----------------------+   |
|      ||                    |
| +----------------------+   |
| |      Disc            |   |
| +----------------------+   |
+----------------------------+


* MVCC

  =MVCC= as solution for concurrency
    - 2 time marks: Create time (xmin) and delete time (xmax)

  #+BEGIN_SRC sql
    create table mvcc_test (id int);
  #+END_SRC

  #+BEGIN_SRC sql
    insert into mvcc_test (id) values (1);
  #+END_SRC

  #+BEGIN_SRC sql
    select id, xmin, xmax from mvcc_test;
  #+END_SRC

  #+BEGIN_SRC sql
    update mvcc_test set id = 2 where id = 1;
  #+END_SRC

  =On update= - delete previous and create new record (with create ~xmin~ and close ~xmax~)
  =Data shanpshot= - all committed data before this transaction
    - Current ~txid~ and all current working txid
  =Row locks=
    - read never lock
    - row write lock only for another write, read never lock
  =Bloat= table and index
  =Vacuum= / =Autovacuum=
  - Remove deleted rows
  - 2 process:
    - Autovacuum launcher
    - Autovacuum worker
  - Vacuum full
    - Lock table


* Isolation levels

  =Read uncommitted= - +not supporting+
    read not committed rows

  =Read committed= - ~default~
    data shaphot for each operator/command
    read only committed rows

    #+BEGIN_SRC sql
      BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
      -- Get data shanpshot
      SELECT count(*) from patient;
      -- Get data shanpshot
      SELECT count(*) from patient;
      -- Get data shanpshot
      SELECT count(*) from patient;
      END;
    #+END_SRC

  =Repeatable read=
    Data shaphot for first operator
    #+BEGIN_SRC sql
      BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
      -- Get data shanpshot
      SELECT count(*) from patient;
      SELECT count(*) from patient;
      END;
    #+END_SRC

  =Serializable=
    Full isolation (one each other)
    ~SERIALIZABLE~ is the default transaction isolation level in the ~standard~

* Cache Wal CheckPoint

  =WAL= ~write-ahead log~ - journal, write first (fsync)
      not for temp and unlogged tables
  =Sync= / =Async=
  =Wal Levels=
   - Minimal
   - Replica
   - Logical

  #+BEGIN_SRC sql
    select pg_current_wal_lsn();
  #+END_SRC

  #+BEGIN_SRC sql
    select * from pg_ls_waldir() limit 10;
  #+END_SRC

* Checkpoint

  =Checkpointer process=
    Restore all wals too expensive
    Make checkpoint and dump all buffers to disc


  #+BEGIN_SRC
   checkpoint                checkpoint         fail
  .....|.........................|................X......
       |                         | == wal logs == |
  #+END_SRC


* Create database


  =DBMS= -> =Database= -> =Schema= -> =Table= -> =Column=

  =DBMS= (Cluster) - ~my.super.instance~
    =Database= - ~project~
      =Schema= - ~public~
        =Table= - ~sample~
          =Column= -  ~id~ (type)

  By ~default~ - copy =template1=

  #+BEGIN_SRC sql
    \l
  #+END_SRC

  #+BEGIN_SRC sql
    select * from public.user
  #+END_SRC

  #+BEGIN_SRC sql
    select * from user
  #+END_SRC


  #+BEGIN_SRC sql
    show search_path;
  #+END_SRC

  #+BEGIN_SRC sql
    select * from pg_catalog.pg_database;
  #+END_SRC

  =pg_catalog= - implicit
  =pg_temp_N= - for temp and unlogged tables

  #+BEGIN_SRC sql
    select pg_size_pretty(pg_database_size('devbox'));
  #+END_SRC

  #+BEGIN_SRC sql
    \db
  #+END_SRC

  #+RESULTS:
  | List of tablespaces |          |             |
  |---------------------+----------+-------------|
  | Name                | Owner    | Location    |
  | pg_default          | root     |             |
  | pg_global           | root     |             |
  | pgtbsp              | postgres | /tmp/pgtbsp |


  #+BEGIN_SRC sql
select oid, datname from pg_database;
  #+END_SRC

  #+RESULTS:
  |    oid | datname   |
  |--------+-----------|
  |  12662 | postgres  |
  |  16385 | devbox    |
  |      1 | template1 |
  |  12661 | template0 |
  |  16387 | root      |
  | 593837 | demo      |

  #+BEGIN_SRC sql
    select pg_relation_filepath('patient');
  #+END_SRC

  #+RESULTS:
  | pg_relation_filepath |
  |----------------------|
  | base/16385/18017     |

  #+BEGIN_SRC sql
\d+ patient
  #+END_SRC


  #+BEGIN_SRC sql
    select pg_relation_filepath('patient_pkey');
  #+END_SRC


  #+RESULTS:
  | pg_relation_filepath |
  |----------------------|
  | base/16385/18026     |

** Table spaces


   =pg_global=  -> ~$PGDATA/global~
   =pg_default= -> ~$PGDATA/base~

   #+BEGIN_SRC sql
     select * from pg_tablespace
   #+END_SRC


   #+BEGIN_SRC sql
     create tablespace pgtbsp location '/tmp/pgtbsp';
   #+END_SRC

   #+BEGIN_SRC sql
     \db
   #+END_SRC


   #+BEGIN_SRC sql
     create database demo tablespace pgtbsp;
   #+END_SRC


** Toast

   ~Toast~ - The Oversized-Attribute Storage Technique

   Schema =pg_toast=

   1. Zip value untill 8 kb
   2. Move to another table, and slice
   3. Move to another table, and slice and zip

   No new version on row update
