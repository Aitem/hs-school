#+TITLE: Ansvers SQL
#+AUTHOR: M. Surmashev @muradbei
#+PROPERTY: header-args:sql :engine postgresql :dbport 5400 :dbhost localhost :dbuser postgres :dbpassword postgres :database postgres

* Create table

#+BEGIN_SRC sql
create table codes
(
  id serial,
  code varchar(8),
  "desc" varchar(22)
);
#+END_SRC

#+BEGIN_SRC sql
create table items
(
  id serial,
  code varchar(8),
  display text,
  path jsonb
);
#+END_SRC


* Insert data

#+BEGIN_SRC sql
insert into codes (code, "desc")
values ('A', 'Some value')
     , ('A.1', 'Some sub value')
     , ('A.1.01', 'Some sub sub value 1')
     , ('A.1.02','Some sub sub value 2')
     , ('A.1.02.1', 'Some sub sub value 2.1');
#+END_SRC


#+BEGIN_SRC sql
insert into items (code, display)
select 'A.1.02.1', concat('Some A.1.02.1 ', x)
from  generate_series(1, 1000000) x;
#+END_SRC


* Update

В ~CTE~ парсятся codes превращаясь в массивы строк, и рекурсивно отрезаются последние элементы.
После чего эти массивы склеиваются обратно и через ~join~ достается ~desc~
Дальше в update происходит явный join items на cte.

#+BEGIN_SRC sql
with code_paths as
(
  select c.code
       , jsonb_agg(jsonb_build_object('code', _c.code, 'desc', _c."desc") order by _c.code) path
  from codes c
  join lateral
  (
    with recursive
    paths as
    (
	select regexp_split_to_array(c.code, '\.') codes
	union
	select codes[1:(array_length(codes,1)-1)]
	from paths
	where array_length(codes,1) > 1
    )
    select array_to_string(codes, '.') parent
    from paths
  ) pth on true
  join codes as _c
  on _c.code = pth.parent
  group by c.code
)
update items
set path = c.path
from items i
join code_paths c on i.code = c.code
where i.id = items.id;
#+END_SRC


Отчасти похоже на предыдущее решение, основное отличие в том, что
вычисление ~path~ производится для каждого значения ~items~

#+BEGIN_SRC sql
  update items i
     set "path" =
	 (
	   with recursive its(code, idx, "desc") as
	       (
		 select code, 1, "desc" from codes where code = split_part(i.code, '.', 1)
		  union all
		 select c.code, it.idx + 1, c.desc
		   from its it, codes c
		  where concat(it.code, '.', split_part(i.code, '.', it.idx + 1)) = c.code
	       )
	   select array_to_json(array_agg(row_to_json(data)))
	     from (select code, "desc" from its) data
	 );
#+END_SRC

Похож на первый вариант, с той лишь разницой что join в update происходит не явно
(можно убедиться в этом посмотрев планы выполнения запросов)

#+BEGIN_SRC sql
WITH RECURSIVE c AS
  (
    SELECT string_to_array(code, '.') codes
    from items
    GROUP BY code
  ),
  b AS
  (
    select code,description,1 as i from codes
    UNION
    select b.code, b.description, i+1 as i from b,c WHERE i < array_length(c.codes,1)
  ),
  e as
  (
    SELECT * from b
    JOIN c
    ON b.code =  array_to_string(c.codes[1:b.i],'.')
  ),
  d AS
  (
    SELECt jsonb_agg(jsonb_build_object('code', code, 'desc', description )) as path , codes
    from e
    GROUP BY codes
  )

UPDATE items
SET path = d.path
FROM d
WHERE items.code = array_to_string(d.codes,'.');
#+END_SRC

Интересное решение через ilike, благо условия задачи повзволяют

#+BEGIN_SRC sql
with grouped_codes as
(
  select code from items group by code
),
paths as
(
  select grp.code
       , (select jsonb_agg(jsonb_build_object('code', c.code, 'desc', c.desc))
          from codes c
          where grp.code ilike (c.code || '%')) path
  from grouped_codes grp
)
update items
set path = paths.path
from paths
where items.code = paths.code
#+END_SRC

Тоже ~ilike~ но через оператор ~~~

#+BEGIN_SRC sql
with i_path as
(
  select i.id,
         jsonb_agg(jsonb_build_object ('code', c.code,
                                      'desc', c.desc)) as path
  from items i
  join codes c
    on i.code ~ c.code and i.code != c.code
  group by i.id
)
update items as it
set path = ip.path
from i_path ip
where it.id = ip.id;
update items set path = path;
#+END_SRC

Несколько вывернутый вариант ~ilike~ реализованный через ~left~
P.S. может потерятся порядок кодов

#+BEGIN_SRC sql
update items i
set path = (
  select jsonb_agg(jsonb_build_object('code', c.code, 'desc', c.dsc))
  from codes c
  where left(i.code, length(c.code)) = c.code and c.code <> i.code
)
#+END_SRC

Тоже самое что и первый вариант только через явный ~ilike~
P.S. может потерятся порядок кодов

#+BEGIN_SRC sql
update items
set path = (
  select jsonb_agg(jsonb_build_object('code', codes.code, 'desc', codes.desc))
  from codes
  where items.code ilike codes.code || '%'
)
#+END_SRC

Крайне интересный вариант без with recursive а на  generate_series

#+BEGIN_SRC sql
UPDATE items SET path = (
    WITH temp as
    (
        SELECT array_to_string((string_to_array(items.code, '.'))[0:incrementor], '.') as "code",
               (SELECT "desc" FROM codes WHERE code = array_to_string((string_to_array(items.code, '.'))[0:incrementor], '.') LIMIT 1) as "desc"
        FROM generate_series(1, cardinality(string_to_array(items.code, '.'))) as incrementor
    )

    SELECT json_agg(temp) FROM temp
) WHERE items.path IS NULL;
#+END_SRC

Немного мудренный вариант, но из интересного (как и в одном из примеров выше) сначала достаются уникальные коды

#+BEGIN_SRC sql
  WITH _all_codes AS
      (SELECT DISTINCT code
	 FROM items),
    _codes_with_path AS
      (SELECT code,
	      (WITH RECURSIVE _code_parts AS
		   (SELECT 1 AS idx, array[]::text[] AS acc
		     UNION
		    SELECT idx+1 AS idx,
			   array_append(acc, (SELECT concat_ws('.', acc[array_upper(acc, 1)], split_part(code, '.', idx)))) AS acc
		      FROM _code_parts
		     WHERE idx <
			   (SELECT array_length(regexp_split_to_array(code, '\.'), 1))),
		 code_parts AS
		   (SELECT acc
		      FROM _code_parts
		     ORDER BY idx DESC
		     LIMIT 1),
		 unnested_code_parts AS
		   (SELECT unnest(acc) code_part
		      FROM code_parts),
		 _path AS
		   (SELECT jsonb_agg(jsonb_build_object('code', cd.code, 'desc', cd.DESC))
		      FROM unnested_code_parts
			     LEFT JOIN codes cd ON cd.code = code_part)
	        SELECT *
		FROM _path) AS PATH
	 FROM _all_codes)
      UPDATE items
      SET PATH = cwp.path
      FROM _codes_with_path AS cwp
      WHERE items.code = cwp.code
#+END_SRC

Еще один вариант через ilike (из сомнительного - join на items в cte)

#+BEGIN_SRC sql
WITH code_paths AS
(
    SELECT   mc.item_code AS code,
	    Jsonb_agg(Jsonb_build_object('code', mc.code, 'desc', mc.description)) AS path
    FROM
    (
       SELECT DISTINCT c.id, c.code, c.description, i.code AS item_code
       FROM codes c
       JOIN items i
       ON  i.code ilike c.code || '%' AND i.code != c.code
       ORDER BY c.id
    ) AS mc
    GROUP BY mc.item_code
)
UPDATE items i
SET    path = pths.path
FROM   (SELECT code, path
        FROM   code_paths) AS pths
WHERE  i.code = pths.code;
#+END_SRC
