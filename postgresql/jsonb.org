#+TITLE: JSONB
#+AUTHOR: M. Surmashev @muradbei
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+PROPERTY: header-args:sql :engine postgresql :dbport 5400 :dbhost localhost :dbuser postgres :dbpassword postgres :database postgres

* Intro                                                            :noexport:

  [[./jsonb.png]]

* Table of Contents                                                   :TOC_3:
- [[#install][Install]]
- [[#jsonb][JSONB]]
  - [[#json-vs-jsonb][JSON vs JSONB]]
- [[#basic-operators-and-functions][Basic operators and functions]]
  - [[#create-jsonb][Create JSONB]]
  - [[#predicates][Predicates]]
  - [[#mutate-jsonb][Mutate jsonb]]
  - [[#extract-value][Extract value]]
  - [[#iterators][Iterators]]
  - [[#aggregates][Aggregates]]
- [[#jsquery][Jsquery]]
  - [[#jsquery-syntax][Jsquery syntax]]
    - [[#simple-expression][Simple expression]]
    - [[#path-select][Path select]]
- [[#jsonpath][JsonPath]]
  - [[#playground][Playground]]
  - [[#strict-and-lax-modes][Strict And Lax Modes]]
  - [[#sqljson-path-language][SQL/JSON Path Language]]
  - [[#operators-and-methods][Operators and Methods]]
- [[#json-knife][Json knife]]
  - [[#functions][Functions]]
- [[#class-work][Class work]]
  - [[#answer][Answer]]

* Install

  Run docker container vith PostgreSQL 12:
  #+name: Run db
  #+BEGIN_SRC bash
    docker-compose up -d
  #+END_SRC

  Check connection:
  #+name: Check connection
  #+BEGIN_SRC bash :results value drawer
    psql -h localhost -p 5400 -U postgres -c 'select 1';
  #+END_SRC

  Ensure connection via psql:
  #+name: Check connection and list databases
  #+BEGIN_SRC sql
    \l
  #+END_SRC

* JSONB

   [[https://postgrespro.ru/docs/postgrespro/10/datatype-json?lang=en][JSON/JSONB]] - JSON data types are for storing JSON (JavaScript Object Notation) data, as specified in [[https://tools.ietf.org/html/rfc7159?lang=en][RFC 7159]] .

   #+BEGIN_QUOTE
   ⚡ [[https://www.postgresql.org/docs/13/functions-json.html][JSON Functions and Operators]] - functions and operators for processing and creating JSON data
   #+END_QUOTE

** JSON vs JSONB

 - ~JSON~ plain text json
 - ~JSONB~ binary json format
   - All keys unique
   - All keys sorted

*Exmaple:*

=JSON= can containing duplicate keys

  #+name: Cast to JSON
  #+BEGIN_SRC sql
    select '{"name": "Bob", "name": "John"}'::json
  #+END_SRC

  #+RESULTS: Cast to JSON
  | json                            |
  |---------------------------------|
  | {"name": "Bob", "name": "John"} |

=JSONB= replace double key

  #+name: Cast to JSONB
  #+BEGIN_SRC sql
    select '{"name": "Bob", "name": "John"}'::jsonb
  #+END_SRC

  #+RESULTS: Cast to JSONB
  | jsonb            |
  |------------------|
  | {"name": "John"} |

* Basic operators and functions
** Create JSONB

  =::JSONB= - cast string as json/jsonb type

  #+BEGIN_SRC sql
    select '{"name": "Bob"}'::JSONB;
  #+END_SRC


  =jsonb_build_array= - create json/jsonb contains array

  #+BEGIN_SRC sql
    select jsonb_build_array(1, 2, 3, 'Bob');
  #+END_SRC


  =jsonb_build_object= - create json/jsonb object

  #+BEGIN_SRC sql
    select jsonb_build_object('name', 'Bob', 'family', 'Smith');
  #+END_SRC

** Predicates

  =?= - Does the string exist as a top-level key within the JSON value
  #+BEGIN_SRC sql
    select '{"name": "Bob"}'::JSONB ? 'name';
  #+END_SRC

  =@>= - Does the left JSON value contain the right JSON
  #+BEGIN_SRC sql
    select '{"name": "Bob", "family": "Smith"}'::jsonb
	     @> '{"name": "Bob"}'::jsonb ;
  #+END_SRC

** Mutate jsonb

  =||= - Concatenate two jsonb values into a new jsonb value
  #+BEGIN_SRC sql
    select '{"name": "Bob"}'::JSONB || '{"family": "Smith"}'::JSONB;
  #+END_SRC

  =-= - Delete key/value pair or string element from left operand
  #+BEGIN_SRC sql
    select '{"name": "Bob", "family": "Smith"}'::jsonb - 'name'
  #+END_SRC

  =jsonb_set= - Insert new value by path
  #+BEGIN_SRC sql
    select jsonb_set('{"f1":1,"f2":null}', '{f1}', '[2,3,4]') ;
  #+END_SRC

** Extract value

   =-> ->> #> #>>= - Default value extractors

   | *Operator* | *Argument*      | *Result* |
   |----------+---------------+--------|
   | ~->~       | integer, text | jsonb  |
   | ~->>~      | integer, text | text   |
   | ~#>~       | text[]        | jsonb  |
   | ~#>>~      | text[]        | text   |

   #+BEGIN_SRC sql
     select
       x -> 1 as "->"
       , x->> 1 as "->>"
       , x#> '{0, name}' as "->>"
       , x#>> '{0, name}' as "->>"
       from (values ('[{"name": "Joe"}, {"name": "Bob"}]'::jsonb)) as t(x);
     select
       pg_typeof(x -> 1) as "->"
       , pg_typeof(x->> 1) as "->>"
       , pg_typeof(x#> '{0, name}') as "->>"
       , pg_typeof(x#>> '{0, name}') as "->>"
       from (values ('[{"name": "Joe"}, {"name": "Bob"}]'::jsonb)) as t(x) ;
   #+END_SRC

** Iterators

   =jsonb_array_elements= - populate records from json/jsonb array
   #+BEGIN_SRC sql
     select jsonb_array_elements_text('[1, 2, 3, 4, 5]'::jsonb) itm
   #+END_SRC

   #+BEGIN_SRC sql
     select sum(x::int)
       from (select jsonb_array_elements_text('[1, 2, 3, 4, 5]'::jsonb)) t(x)
   #+END_SRC

   =jsonb_each= - populate key/value records from jsonb object
   #+BEGIN_SRC sql
     select *
       from jsonb_each('{"name": "Joe", "family": "Smith"}'::jsonb)
   #+END_SRC

** Aggregates

   =jsonb_agg= - aggregate tuples into jsonb array
   #+BEGIN_SRC sql
     select jsonb_agg(x)
       from generate_series(1, 5) t(x)
   #+END_SRC

   =jsonb_object_agg= - aggregate new jsonb object
   #+BEGIN_SRC sql
     select jsonb_pretty(jsonb_object_agg(x, x))
       from generate_series(1,
   #+END_SRC

* Jsquery

  [[https://github.com/postgrespro/jsquery][JsQuery]] - json query language with ~GIN~ indexing support

  JSquey not default extension, and need to be installed

  #+BEGIN_SRC sql
    create extension if not exists jsquery;
  #+END_SRC

  JSquey use ~@@~ operator

  #+BEGIN_QUOTE
 ⚡ In PG12 ~jsonpath~ use the same operator ~@@~
    For this reason you should explicitly cast to =::jsqury=

 ⚡ ~JsQuery~ - only as predicate
  #+END_QUOTE

  *Example:*
  #+BEGIN_SRC sql
    select '{"name": "Bob"}'::jsonb @@ ('name = Bob')::jsquery
  #+END_SRC

  #+BEGIN_SRC sql
    select '[{"name": "Bob"}, {"name": "John"}]'::jsonb @@ ('#(name = Bob)')::jsquery
  #+END_SRC


** Jsquery syntax

*** Simple expression

    ~x = abc~ — value of key ~x~ is equal ~abc~;
    #+BEGIN_SRC sql
      select '{"name": "Bob", "family": "Smith"}'::jsonb @@ ('name = Bob')::jsquery
    #+END_SRC

    ~$ @> [4, 5]~ - the JSON document is an array containing values ~4, 5~;
    #+BEGIN_SRC sql
      select '[1, 2, 3, 4, 5, 6, 7]'::jsonb @@ ('$ @> [1, 4, 8]')::jsquery
    #+END_SRC

    ~abc >= 10~ - value of key ~abc~ is greater than or equal to ~10~;
    #+BEGIN_SRC sql
      select '{"name": "Bob", "age": 55}'::jsonb @@ ('age > 15')::jsquery
    #+END_SRC

    ~volume IS NUMERIC~ - type of key "volume" is numeric.
    Also supports ~IS ARRAY~, ~IS OBJECT~, ~IS STRING~ and ~IS BOOLEAN~.

    #+BEGIN_SRC sql
      select '{"name": "Bob", "age": 55}'::jsonb @@ ('age IS NUMERIC')::jsquery
    #+END_SRC

    ~foo = *~ - key ~foo~ exists in object.
    #+BEGIN_SRC sql
      select '{"name": "Bob", "age": 55}'::jsonb @@ ('name = *')::jsquery
    #+END_SRC

    ~*.color = red~ - there is object somewhere which key "color" has value "red".
    #+BEGIN_SRC sql
      select '{"name": "Bob", "age": 55, "contact": [{"phone": 911}]}'::jsonb @@ ('*.phone = 911')::jsquery
    #+END_SRC

    ~similar_ids.@# > 5~ - ~similar_ids~ is an array or object of length greater than ~5~;
    #+BEGIN_SRC sql
      select '{"contact": [{"phone": 911}, {"email": "foo@com"}]}'::jsonb @@ ('contact.@# > 1')::jsquery
    #+END_SRC

    ~similar_product_ids.# = 0684824396~ - array ~similar_product_ids~ contains string ~0684824396~;
    #+BEGIN_SRC sql
      select '{"name": "Bob", "age": 55}'::jsonb @@ ('age > 15')::jsquery
    #+END_SRC

*** Path select

    ~#~ - any index of array; \\
    ~#:~ - every index of array;
    #+BEGIN_SRC sql
      select '{"contact": [{"phone": 911}, {"email": "foo@com"}]}'::jsonb @@ ('contact.#.phone = 911')::jsquery
    #+END_SRC

    ~#N~ - Nth index of array;
    #+BEGIN_SRC sql
      select '{"contact": [{"phone": 911}, {"email": "foo@com"}]}'::jsonb @@ ('contact.#1.phone = 911')::jsquery
    #+END_SRC

    ~%~ - any key of object; \\
    ~%:~ - every key of object;
    #+BEGIN_SRC sql
      select '{"name": "Bob", "age": 55}'::jsonb @@ ('% = Bob')::jsquery
    #+END_SRC

    ~*~ - any sequence of array indexes and object keys; \\
    ~*:~ - every sequence of array indexes and object keys. \\
    ~$~ - the whole JSON document as single value, could be only the whole path.
    #+BEGIN_SRC sql
      select '{"name": "Bob", "age": 55}'::jsonb @@ ('*($ IS STRING OR $ IS NUMERIC)')::jsquery
    #+END_SRC

* JsonPath

  [[https://www.postgresql.org/docs/13/functions-json.html][JsonPath]] - SQL json standard realization

  Set of ~jsonb_path_query*~ functions and ~@@~ operator

  #+BEGIN_QUOTE
  ⚡Unlike ~JsQuery~, ~JsonPath~ can =extract= and =predicate=
  #+END_QUOTE

  *Example:*

  Get all values from ~a~ between 2 and 4
  #+BEGIN_SRC sql
    select jsonb_path_query('{"a":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{"min":2, "max":4}')
  #+END_SRC

  Does left part contains in ~a~ values between 2 and 5
  #+BEGIN_SRC sql
    select '{"a":[1,2,3,4,5]}' @@ '$.a[*] ? (@ >= 2 && @ <= 5)'
  #+END_SRC

** Playground

   Prepare playground
   #+BEGIN_SRC sql
     create table jsonbsample (resource jsonb);
   #+END_SRC

   #+BEGIN_SRC sql
     insert into jsonbsample (resource)
     values ('{
       "name": "ГКБ 1",
       "type": [
	   {
	       "text": "Амбулаторный",
	       "coding": [
		   {
		       "code": "1",
		       "system": "urn:CodeSystem:frmo.structure-type",
		       "display": "Амбулаторный"
		   },
		   {
		       "code": "B034",
		       "system": "urn:CodeSystem:snomed",
		       "display": "Ambulatory"
		   }
	       ]
	   }
       ],
       "identifier": [
	   {
	       "value": "46da1f9f-608f-11e3-a70e-e4115baf3989",
	       "system": "urn:source:rf:Organization"
	   },
	   {
	       "value": "e4115baf3989-608f-11e3-a70e-46da1f9f",
	       "system": "urn:source:mis:Organization"
	   }
       ]}')
     #+END_SRC

** Strict And Lax Modes

   =lax= (default) — the path engine implicitly adapts the queried data to the specified path.
   Any remaining structural errors are suppressed and converted to empty SQL/JSON sequences.

   #+BEGIN_SRC sql
     select jsonb_path_query(resource, 'lax $.name.given')
       from (values ('{"name": [{"given": ["Bob"]}]}'::jsonb)) t(resource)
   #+END_SRC


   =strict= — if a structural error occurs, an error is raised.

   #+BEGIN_SRC sql
     select jsonb_path_query(resource, 'strict $.name[*].given')
       from (values ('{"name": [{"given": ["Bob"]}]}'::jsonb)) t(resource)
   #+END_SRC

** SQL/JSON Path Language

   The ~.key~ accessor operator to descend through surrounding JSON objects:
   #+BEGIN_SRC sql
     select jsonb_path_query(resource, '$.type.coding.code')
       from jsonbsample
   #+END_SRC


   To retrieve the contents of an array, you typically use the ~[*]~ operator:
   #+BEGIN_SRC sql
     select jsonb_path_query(resource, 'strict $.type[*].coding[*].code')
       from jsonbsample
   #+END_SRC


   Get specified array element ~[N]~
   #+BEGIN_SRC sql
     select jsonb_path_query(resource, 'strict $.type[0].coding[0].code')
       from jsonbsample
   #+END_SRC


   The result of each path evaluation step can be processed by one or more jsonpath operators and methods.
   #+BEGIN_SRC sql
     select jsonb_path_query(resource, '$.type.coding.size()')
       from jsonbsample
   #+END_SRC


   When defining a path, you can also use one or more filter using ~?~ expressions that work similarly to the WHERE clause in SQL.
   Within a filter expression, the ~@~ variable denotes the value being filtered.
   #+BEGIN_SRC sql
     select jsonb_path_query(resource, '$.identifier ? (@.system == "urn:source:rf:Organization").value')
       from jsonbsample
   #+END_SRC


   You can use several filter expressions in sequence, if required.
   Using filter expressions at different nesting levels is also allowed.
   #+BEGIN_SRC sql
     select jsonb_path_query(resource,
            '$.type ? (@.coding.system starts with "urn:CodeSystem").coding ? (@.code == "1")')
       from jsonbsample
   #+END_SRC


** Operators and Methods

   ~==~ - Equality operator
   #+BEGIN_SRC sql
     select jsonb_path_query('[1,2,2,3]', '$[*] ? (@ == 2)')
   #+END_SRC

   ~!= < <= >= > <>~  - Non-equality operator
   #+BEGIN_SRC sql
     select jsonb_path_query('[1,2,2,3]', '$[*] ? (@ <> 2)')
   #+END_SRC

   ~&& || !~ - Boolean ~AND NOT OR~
   #+BEGIN_SRC sql
     select jsonb_path_query('[1,2,3,4]', '$[*] ? (@ > 1 &&  @ < 4)')
   #+END_SRC

   ~+ - / * % floor abs~ - Some math operators
   #+BEGIN_SRC sql
     select jsonb_path_query('[1,2,3,4]', '$[*] ? ((@ + 1) > 1 &&  (@+1) < 4)')
   #+END_SRC

   ~like_regex, starts with~ - Regexp and text strt operators
   #+BEGIN_SRC sql
     select jsonb_path_query('["M", "Ma", "Mar", "ara", "rat", "at", "t"]', '$[*] ? (@ starts with "Ma")')
   #+END_SRC


* Json knife

  [[https://github.com/niquola/jsonknife][Json Knife GigHub repository]]
  Useful functions for working with jsonb in PostgreSQL like data extraction, validation & transformation.

** Functions
   ~knife_extract~
   ~knife_extract_text~
   ~knife_extract_numeric~
   ~knife_extract_min_numeric~
   ~knife_extract_max_numeric~
   ~knife_extract_min_timestamptz~
   ~knife_extract_max_timestamptz~
   ~knife_date_bound~


* Class work

  Extract jsonb oject keys path usuage statistics from table with jsonb column

  *Exmaple:*

  #+BEGIN_SRC sql
    select ...
      from my_table;
  #+END_SRC

  Should return

  #+RESULTS:
  | path                              |             persent |
  |-----------------------------------+---------------------|
  | ["identifier"]                    |  0.9977859778597786 |
  | ["name"]                          |  0.6190405904059041 |
  | ["partOf"]                        | 0.13756457564575647 |
  | ["partOf", "identifier", "value"] | 0.13535055350553504 |
  | ["partOf", "identifier"]          | 0.13535055350553504 |
  | ["activityPeriod"]                | 0.05180811808118081 |
  | ....                              |                 ... |
  | ["activityPeriod", "start"]       | 0.04206642066420664 |
  | ["address"]                       |  0.0188929889298893 |


** Answer

#+BEGIN_SRC sql
  with recursive
  keys as
  (
    select jsonb_build_array(key) pth, value
    from "organization", jsonb_each(resource)

    union

    select pth || jsonb_build_array(k), v
    from keys , jsonb_each(value) t(k, v)
    where jsonb_typeof(value) = 'object'

  )
  , total as
  (
    select count(*) ttl from "organization"
  )

  select pth, (count(*)/ttl::float) persent
  from keys, total
  group by pth, ttl
  order by persent desc
#+END_SRC
