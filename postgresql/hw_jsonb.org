#+TITLE: JSONB HW
#+AUTHOR: M. Surmashev @muradbei
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+PROPERTY: header-args:sql :engine postgresql :dbport 5400 :dbhost localhost :dbuser postgres :dbpassword postgres :database postgres

* 1) Support array stats on class work task

  Create table ~test_patient~ with two columns =id::int= and =resource::jsonb=

  #+BEGIN_SRC sql
    create table test_patient
      (
	id serial primary key,
	resource jsonb
      )
  #+END_SRC

  #+RESULTS:
  | CREATE TABLE |
  |--------------|

  Insert sample dataset from ~./patient.csv~ file

  #+BEGIN_SRC sql
    \copy test_patient(resource) from './patient.csv' DELIMITER E'\t' quote '|'  csv
  #+END_SRC

  #+RESULTS:
  | COPY 124 |
  |----------|

  Check results
  #+BEGIN_SRC sql
    select count(*) from test_patient;
  #+END_SRC

  #+RESULTS:
  | count |
  |-------|
  |   124 |

  Write sql query that should return usage stats of all keys/paths including keys in arrays from table ~test_patient~. \\
  E.G. should be returned stats for  ~{identifier}~, ~{identifier,value}~, ~{identifier,system}~

  *Exmaple of result:*

  | path                                       | persent |
  |--------------------------------------------+---------|
  | {identifier}                               |     557 |
  | {extension}                                |     439 |
  | {identifier,value}                         |     357 |
  | {address,extension,extension}              |     300 |
  | {name}                                     |     223 |
  | {address,extension}                        |     200 |
  | {address}                                  |     200 |
  | {address,line}                             |     200 |
  | {address,extension,extension,valueDecimal} |     200 |
  | {telecom}                                  |     200 |
  | {name,given}                               |     192 |
  | {extension,valueDecimal}                   |     164 |
  | {name,family}                              |     106 |
  | {extension,valueString}                    |     100 |
  | {id}                                       |     100 |
  | {text}                                     |     100 |
  | {text,div}                                 |     100 |
  | {telecom,value}                            |     100 |
  | ....                                       |     ... |
  | ....                                       |     ... |
  | {extension,valueAddress}                   |      69 |
  | {extension,valueAddress,city}              |      69 |
  | {address,city}                             |      52 |
  | {address,postalCode}                       |      37 |
  | {deceased,dateTime}                        |      19 |
  | {deceased}                                 |      19 |
  | {extension,valueAddress,state}             |      15 |


* 2) Database stats

  Extract database usage statistics for all tables in one query that return single JSONB object

  Support material:
  - [[https://postgrespro.ru/docs/postgresql/13/functions-admin#FUNCTIONS-ADMIN-DBSIZE][DB object size functions]] - the functions calculate the disk space usage of database objects,
    or assist in presentation of usage results.
  - [[https://postgrespro.ru/docs/postgresql/12/catalog-pg-class?lang=en][pg_class]] - core postgresql table
  - [[https://www.postgresql.org/docs/13/information-schema.html][information-schema]] - db schema with related database information


  *Structure of this object:*

  #+BEGIN_SRC json
    {"<SCHEMA>": {
	"<TABLENAME>": {
	    "rows": "<ROWS_ESTIMATE>",
	    "index_size": "<TOTAL_INDEX_SIZE>",
	    "table_size": "<TABLE_SIZE>",
	    "index": {
		"<INDEXNAME>": {
		    "size": "<INDEX_SIZE>",
		    "type": "<INDEX_TYPE>"
		}
	    }
	}
    }}
  #+END_SRC

  *Example of result:*

  #+BEGIN_SRC json
    {
	"public": {
	    "app": {
		"rows": 1,
		"index": {
		    "app_pkey": {
			"size": "16 kB",
			"type": "btree"
		    }
		},
		"index_size": "16 kB",
		"table_size": "8192 bytes"
	    },
	    "flag": {
		"rows": 3262,
		"index": {
		    "flag_pkey": {
			"size": "312 kB",
			"type": "btree"
		    },
		    "flag_resource_subject": {
			"size": "328 kB",
			"type": "btree"
		    },
		    "flag_resource_period_end": {
			"size": "160 kB",
			"type": "btree"
		    },
		    "flag_resource_gin_jsquery": {
			"size": "776 kB",
			"type": "gin"
		    }
		},
		"index_size": "1600 kB",
		"table_size": "2432 kB"
	    }
	},
	"information_schema": {
	    "sql_parts": {
		"rows": 9,
		"index": null,
		"index_size": "0 bytes",
		"table_size": "8192 bytes"
	    },
	    "parameters": {
		"rows": 0,
		"index": {
		    "parameters_pkey": {
			"size": "8192 bytes",
			"type": "btree"
		    }
		},
		"index_size": "8192 bytes",
		"table_size": "0 bytes"
	    }
	}
    }
  #+END_SRC


* 3) Json knife using jsonpath

  Realize ~knife_extract~ function using ~jsonpath~ with name =jp_knife_extract=

  #+BEGIN_SRC sql
    CREATE OR REPLACE FUNCTION jp_knife_extract(resource jsonb, paths jsonb) RETURNS jsonb[]
    AS $$
      ...
    $$ LANGUAGE sql
  #+END_SRC

  *Test case:*

  #+BEGIN_SRC sql
    select jp_knife_extract(resource, '[["name"]]') smpl
         , jp_knife_extract(resource, '[["type", "coding", "code"]]') pth
         , jp_knife_extract(resource, '[["type", "coding", 1, "code"]]') idx
         , jp_knife_extract(resource, '[["type", "coding", {"system": "urn:CodeSystem:snomed"}, "code"]]') pred
         , jp_knife_extract(resource, '[["name"], ["type", "coding", "code"], ["type", "coding", {"system": "urn:CodeSystem:snomed"}, "code"]]') cccombo
    from (values ('
	{"name": "ГКБ 1",
	 "type": [
	    {"text": "Амбулаторный",
	     "coding": [
		{"code": "1",
		 "system": "urn:CodeSystem:frmo.structure-type",
		 "display": "Амбулаторный"},
		{"code": "B034",
		 "system": "urn:CodeSystem:snomed",
		 "display": "Ambulatory"}]}],
	 "identifier": [
	     {"value": "46da1f9f-608f-11e3-a70e-e4115baf3989",
	      "system": "urn:source:rf:Organization"},
	     {"value": "e4115baf3989-608f-11e3-a70e-46da1f9f",
	      "system": "urn:source:mis:Organization"}]}'::jsonb)) t(resource)
  #+END_SRC

  #+RESULTS:
  | smpl          | pth                  | idx          | pred         | cccombo                                     |
  |---------------+----------------------+--------------+--------------+---------------------------------------------|
  | {"\"ГКБ 1\""} | {"\"1\"","\"B034\""} | {"\"B034\""} | {"\"B034\""} | {"\"ГКБ 1\"","\"1\"","\"B034\"","\"B034\""} |


* 4) * Json knife without jsonpath (only sql)

  Realize ~knife_extract~ function !*wihtout!* ~jsonpath~ using only sql and name =sql_knife_extract=

  #+BEGIN_SRC sql
    CREATE OR REPLACE FUNCTION sql_knife_extract(resource jsonb, paths jsonb) RETURNS jsonb[]
    AS $$
      ...
    $$ LANGUAGE sql
  #+END_SRC

  *Test case:*

  #+BEGIN_SRC sql
    select sql_knife_extract(resource, '[["name"]]') smpl
         , sql_knife_extract(resource, '[["type", "coding", "code"]]') pth
         , sql_knife_extract(resource, '[["type", "coding", 1, "code"]]') idx
         , sql_knife_extract(resource, '[["type", "coding", {"system": "urn:CodeSystem:snomed"}, "code"]]') pred
         , sql_knife_extract(resource, '[["name"], ["type", "coding", "code"], ["type", "coding", {"system": "urn:CodeSystem:snomed"}, "code"]]') cccombo
    from (values ('
	{"name": "ГКБ 1",
	 "type": [
	    {"text": "Амбулаторный",
	     "coding": [
		{"code": "1",
		 "system": "urn:CodeSystem:frmo.structure-type",
		 "display": "Амбулаторный"},
		{"code": "B034",
		 "system": "urn:CodeSystem:snomed",
		 "display": "Ambulatory"}]}],
	 "identifier": [
	     {"value": "46da1f9f-608f-11e3-a70e-e4115baf3989",
	      "system": "urn:source:rf:Organization"},
	     {"value": "e4115baf3989-608f-11e3-a70e-46da1f9f",
	      "system": "urn:source:mis:Organization"}]}'::jsonb)) t(resource)
  #+END_SRC

  #+RESULTS:
  | smpl          | pth                  | idx          | pred         | cccombo                                     |
  |---------------+----------------------+--------------+--------------+---------------------------------------------|
  | {"\"ГКБ 1\""} | {"\"1\"","\"B034\""} | {"\"B034\""} | {"\"B034\""} | {"\"ГКБ 1\"","\"1\"","\"B034\"","\"B034\""} |
