#+TITLE: DBA
#+AUTHOR: M. Surmashev @muradbei
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+PROPERTY: header-args:sql :engine postgresql :dbport 5400 :dbhost localhost :dbuser postgres :dbpassword postgres :database postgres

* Intro                                                            :noexport:
* Table of Contents                                                   :TOC_3:
- [[#install][Install]]
- [[#configuration][Configuration]]
  - [[#pg_setting][pg_setting]]
- [[#backups][Backups]]
  - [[#logical][Logical]]
  - [[#physical][Physical]]
    - [[#another-tools][Another tools]]
- [[#replication][Replication]]
  - [[#create-replica][Create replica]]
  - [[#multimaster][Multimaster]]
  - [[#failover--promote][Failover / Promote]]
    - [[#check-replication-slot][Check replication slot]]
  - [[#ha-pg][HA PG]]
- [[#monitoring][Monitoring]]
  - [[#ui][UI]]
    - [[#sample][Sample]]
  - [[#raw-pg-metrics-panel][RAW pg metrics (panel)]]
  - [[#what-else][What else?]]
  - [[#time-distribution][Time distribution]]
- [[#audit-logs][Audit Logs]]
- [[#conclusion][Conclusion]]

* Install

  Run docker container vith PostgreSQL 12:
  #+name: Run db
  #+BEGIN_SRC bash
    docker-compose up -d
  #+END_SRC

  Check connection:
  #+name: Check connection
  #+BEGIN_SRC bash :results value drawer
    psql -h localhost -p 5400 -U postgres -c 'select 1';
  #+END_SRC

  Ensure connection via psql:
  #+name: Check connection and list databases
  #+BEGIN_SRC sql
    \l
  #+END_SRC


* Configuration

  [[https://postgrespro.ru/docs/postgresql/12/runtime-config?lang=en][Configuration]] - PostgreSQL Server Configuration

  Primary configuration - [[https://github.com/postgres/postgres/blob/master/src/backend/utils/misc/postgresql.conf.sample][postgresql.conf]] and ~postgresql.auto.conf~
  Access - [[https://postgrespro.ru/docs/postgresql/12/auth-pg-hba-conf?lang=en][pg_hba.conf]]


  #+NAME: Show config file
  #+BEGIN_SRC sql
    show config_file
  #+END_SRC

  #+NAME: Change config
  #+BEGIN_SRC sql
    show  max_parallel_workers_per_gather;
    alter system set  max_parallel_workers_per_gather = 8;
  #+END_SRC

  #+NAME: Aplly changes
  #+BEGIN_SRC sql
    alter system set  max_parallel_workers_per_gather = 8;
    select pg_reload_conf();
  #+END_SRC

  #+NAME: Reset
  #+BEGIN_SRC sql
    alter system reset max_parallel_workers_per_gather;
    select pg_reload_conf();
  #+END_SRC

  #+NAME: Show source of setting
  #+BEGIN_SRC sql
    select * from pg_file_settings;
  #+END_SRC

** pg_setting

  [[https://postgrespro.ru/docs/postgresql/12/view-pg-settings?lang=en][pg_settings]] - the view _pg_settings_ provides access to run-time parameters of the server.

  #+NAME: Count of all settings
  #+BEGIN_SRC sql
    select count(*) from pg_settings;
  #+END_SRC

  #+NAME: Setting sample
  #+BEGIN_SRC sql
    select * from pg_settings limit 10;
  #+END_SRC

  #+NAME: System all settings
  #+BEGIN_SRC sql
    select * from pg_settings where category = 'Autovacuum' ;
  #+END_SRC

* Backups

  [[https://www.youtube.com/watch?v=Us6cHVNA4vk][Инструменты создания бэкапов PostgreSQL / Андрей Сальников (Data Egret)]]
  [[https://habr.com/ru/company/yandex/blog/415817/][Разгоняем бэкап. Лекция Яндекса / Андрей Бородин]]

** Logical

   Logical backups - create  SQL dump.

   [[https://www.postgresql.org/docs/12/app-pgdump.html][pg_dump]] - create sql dump of database/table/structure/data
   [[https://postgrespro.ru/docs/postgresql/12/app-pgrestore][pg_restore]] - restore database from an archive file


   #+NAME: Create logical sql backup
   #+BEGIN_SRC bash :results value drawer
     docker exec hs-db pg_dump -U postgres -f /tmp/s.sql -t mvcc_test -d postgres
     docker exec hs-db cat /tmp/s.sql
   #+END_SRC

   =Advantages=
     - result just ~.sql~ file
     - any granularity (database/schema/table/data/structure_only)

   =limitations=
     - too long and big on big data

** Physical

   Physical backup - file system snapshot.
   [[https://postgrespro.ru/docs/postgresql/12/app-pgbasebackup?lang=en][pg_basebackup]] - used to take base backups of a running PostgreSQL database cluster.


   #+NAME: Create base backup
   #+BEGIN_SRC bash :results value drawer
     rm /tmp/base
     pg_basebackup -U postgresql -h localhost -p 5400 -D /tmp/base
   #+END_SRC

   #+NAME: Chech replication slot
   #+BEGIN_SRC sql
     select * from pg_replication_slots;
   #+END_SRC

   #+NAME: Check backup
   #+BEGIN_SRC bash :results value drawer
     ls -lah /tmp/base
   #+END_SRC

   How it's work
     1) conn replication protocol
     2) set wal
     3) copy
     4) next wal
     5) copy wal

         pg_base_backup
                cpt        cpt         cpt
   ------------|=|----------|-----------|------|=|-------------> t
          open repl.con
                  wal_1  wal_2  wal_3  wal_4


*** Another tools

    - [[https://postgrespro.ru/docs/enterprise/12/app-pgprobackup][pg_probackup]]
    - [[https://www.pgbarman.org/][barman]]
    - [[https://pgbackrest.org/][pgBackRest]]
    - [[https://github.com/wal-g/wal-g][wal-g]]
    - [[https://github.com/wal-e/wal-e][wal-e]]

* Replication

  [[https://www.postgresql.org/docs/13/high-availability.html][High Availability, Load Balancing, and Replication]]

  - [[https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION][Streaming replication]] / [[https://www.postgresql.org/docs/13/warm-standby.html][Log-Shipping]]
  - Chain / Cascade replication
  - Sync / Async replication

** Create replica

   Configure replica server
     - Add ~primary_conninfo~  to ='host=host.docker.internal port=5400 user=postgres password=postgres'=
     - Set ~primary_slot_name~ to ='replica'=
     - Touch =standby.signal= file

   Create replication slot

   #+NAME: Create replication slot
   #+BEGIN_SRC sql
     SELECT pg_create_physical_replication_slot('replica');
   #+END_SRC

   Run replica server
   #+NAME: Run replica
   #+BEGIN_SRC bash
     docker-compose -f docker-compose.rep.yaml up -d
   #+END_SRC


   #+NAME: Check replication slot with replica
   #+BEGIN_SRC sql
     SELECT * FROM pg_replication_slots;
   #+END_SRC


** Multimaster

   [[https://www.youtube.com/watch?v=bcRo--JlR14][Зачем нужен мультимастер? / Илья Космодемьянский (PostgreSQL-Consulting LLC)]]

   - [[https://github.com/2ndQuadrant/pglogical][pglogical]]
   - [[https://www.2ndquadrant.com/en/resources/postgres-bdr-2ndquadrant/][BDR]]

** Failover / Promote

   [[https://postgrespro.ru/docs/postgresql/13/app-pg-ctl][pg_ctl promote]] - mode commands the standby server that is running in the specified data directory to end standby mode and begin read-write operations.

   #+BEGIN_SRC bash
     docker exec hs-db-rep --user=postgres /opt/pgpro/std-12/bin/pg_ctl promote -D /data
   #+END_SRC

*** Check replication slot

   #+NAME: Check replication slot after promote
   #+BEGIN_SRC sql
     SELECT * FROM pg_replication_slots;
   #+END_SRC

   #+NAME: Drop if need
   #+BEGIN_SRC sql
     select pg_drop_replication_slot('replica');
   #+END_SRC


** HA PG

  HA solutions:
   - [[https://github.com/zalando/patroni][zalando/patroni]]
   - [[https://github.com/sorintlab/stolon][Stolon]]
   - [[https://repmgr.org/][repmgr]]
   - [[https://clusterlabs.github.io/PAF/][PostgreSQL Automatic Failover (PAF)]]
   - [[https://github.com/aiven/pglookout][pglookout]]
   - [[https://www.pgpool.net/mediawiki/index.php/Main_Page][pgPool-II]]

  Bonus:
   - [[https://docs.timescale.com/timescaledb/latest/how-to-guides/distributed-hypertables/#distributed-hypertables][Distributed Hypertables]] (Timescale DB)

* Monitoring

** UI

   - Zabbix
   - Grafana / Prometheus
   - Kibana / ElasticSearch
   - Grafana
   - DataDog
   - OkMeter

    #+NAME: Run grafana
    #+BEGIN_SRC bash
      docker-compose -f audit.yaml up -d
    #+END_SRC

*** Sample

    *Long query*

    #+BEGIN_SRC sql
      SELECT count(pid) as value, now() as time
      FROM pg_stat_activity
      WHERE query != '<IDLE>' AND query NOT ILIKE '%pg_stat_activity%' and query not ilike '%vacuum%' and "state" = 'active'
      and query_start < (now() - interval '10 second');
    #+END_SRC

    #+BEGIN_SRC sql
      select pg_sleep(60)
    #+END_SRC


** RAW pg metrics (panel)

   [[https://www.youtube.com/watch?v=Hbi2AFhd4nY][Основы мониторинга PostgreSQL / Алексей Лесовский (DataEgret)]]

   - Доступность
   - Доступность реплик
   - Replicas delay
   - QPS/TPS
   - Table space
   - Connections
   - Vacuum
   - Oldest transaction
   - pg_stat_statements
   - pg_stat_activity (long query)
   _ pg_stat_replication

** What else?

   Like tests in programming

** Time distribution

  - [[https://www.percona.com/doc/percona-monitoring-and-management/2.x/index.html][PMM]] ([[https://pmmdemo.percona.com/][demo]])
  - [[https://github.com/prometheus-community/postgres_exporter][Postgresql exporter]]
  - [[https://okmeter.io/pg][OkMeter]]
  - [[https://github.com/prometheus/node_exporter][Node exporter]]

* Audit Logs

  - Audit logs (Elastic / Click House)
  - ELK

  HTTP REQ ->
    Gen =req_id=
      _log_req_: =req_id=, ~url~, ~uid~, ~cid~, ~params~
      -> do query_1
         _log_query_ with =req_id=: ~duration~, ~params~
      -> do query_2
         _log_query_ with =req_id=: ~duration~, ~params~
      _log_resp_: =req_id=, ~url~, ~uid~, ~cid~, ~params~, ~status~, ~duration~
  HTTP RESP

* Conclusion

  - Monitoring is cheap
  - Monitoring is a endless process
  - Manula process (anomaly detection)
